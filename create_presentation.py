#!/usr/bin/env python3
"""
ActionChain Token - Presentation Generator
Creates a PDF presentation explaining the project, use case, and architecture
"""

from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.colors import HexColor, black, white, blue, green, red
from reportlab.graphics.shapes import Drawing, Rect, Circle, Line, String
from reportlab.graphics import renderPDF
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_JUSTIFY
import matplotlib.pyplot as plt
import matplotlib.patches as patches
from io import BytesIO
import tempfile
import os

class ActionChainPresentation:
    def __init__(self):
        self.doc = SimpleDocTemplate(
            "ActionChain_Token_Presentation.pdf",
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=72,
            bottomMargin=18
        )
        self.styles = getSampleStyleSheet()
        self.story = []
        
        # Define custom colors
        self.primary_color = HexColor('#2E86AB')
        self.accent_color = HexColor('#A23B72')
        self.success_color = HexColor('#F18F01')
        self.bg_color = HexColor('#F5F5F5')
        
        # Custom styles
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=self.primary_color,
            alignment=TA_CENTER
        )
        
        self.section_style = ParagraphStyle(
            'SectionTitle',
            parent=self.styles['Heading2'],
            fontSize=18,
            spaceAfter=12,
            textColor=self.accent_color,
            leftIndent=0
        )
        
        self.body_style = ParagraphStyle(
            'CustomBody',
            parent=self.styles['Normal'],
            fontSize=11,
            spaceAfter=12,
            alignment=TA_JUSTIFY,
            leftIndent=0,
            rightIndent=0
        )

    def create_title_page(self):
        """Create the title page"""
        self.story.append(Spacer(1, 2*inch))
        
        title = Paragraph("üîó ActionChain Token", self.title_style)
        self.story.append(title)
        
        subtitle = Paragraph(
            "Un Syst√®me de Trading D√©centralis√© sur Blockchain Tezos",
            ParagraphStyle(
                'Subtitle',
                parent=self.styles['Normal'],
                fontSize=16,
                textColor=self.accent_color,
                alignment=TA_CENTER,
                spaceAfter=30
            )
        )
        self.story.append(subtitle)
        
        # Project info
        info_text = """
        <b>Token Symbol:</b> ACT<br/>
        <b>Blockchain:</b> Tezos<br/>
        <b>Type:</b> Smart Contract avec Orderbook Int√©gr√©<br/>
        <b>Date:</b> Juillet 2025
        """
        info = Paragraph(info_text, self.body_style)
        self.story.append(info)
        
        self.story.append(PageBreak())

    def create_use_case_section(self):
        """Explain the use case and problem being solved"""
        title = Paragraph("1. Cas d'Usage et Probl√©matique", self.section_style)
        self.story.append(title)
        
        problem_text = """
        <b>Probl√©matique Actuelle:</b><br/>
        ‚Ä¢ Les √©changes centralis√©s contr√¥lent la liquidit√© et imposent des frais √©lev√©s<br/>
        ‚Ä¢ Manque de transparence dans l'ex√©cution des ordres<br/>
        ‚Ä¢ Risques de contrepartie et de censure<br/>
        ‚Ä¢ Acc√®s limit√© aux march√©s pour les petits investisseurs<br/><br/>
        
        <b>Notre Solution:</b><br/>
        ActionChain Token r√©sout ces probl√®mes en cr√©ant un syst√®me de trading enti√®rement d√©centralis√©
        o√π les utilisateurs peuvent √©changer des tokens directement sur la blockchain Tezos, sans
        interm√©diaires centralis√©s.
        """
        self.story.append(Paragraph(problem_text, self.body_style))
        
        benefits_text = """
        <b>Avantages de notre approche:</b><br/>
        ‚Ä¢ <b>D√©centralisation compl√®te:</b> Aucun point central de d√©faillance<br/>
        ‚Ä¢ <b>Transparence totale:</b> Tous les ordres et transactions sont visibles on-chain<br/>
        ‚Ä¢ <b>Frais r√©duits:</b> Seulement les frais de gas de la blockchain<br/>
        ‚Ä¢ <b>Acc√®s global:</b> Ouvert √† tous, 24/7<br/>
        ‚Ä¢ <b>Auto-custody:</b> Les utilisateurs gardent le contr√¥le de leurs fonds<br/>
        ‚Ä¢ <b>R√©sistance √† la censure:</b> Impossible de bloquer ou restreindre l'acc√®s
        """
        self.story.append(Paragraph(benefits_text, self.body_style))
        
        self.story.append(PageBreak())

    def create_blockchain_solution_section(self):
        """Explain how blockchain solves the use case"""
        title = Paragraph("2. Comment la Blockchain R√©sout le Probl√®me", self.section_style)
        self.story.append(title)
        
        blockchain_text = """
        <b>Pourquoi Tezos?</b><br/>
        ‚Ä¢ <b>Smart Contracts S√©curis√©s:</b> Michelson offre une v√©rification formelle<br/>
        ‚Ä¢ <b>Faibles Co√ªts:</b> Transactions peu co√ªteuses compar√© √† Ethereum<br/>
        ‚Ä¢ <b>Gouvernance On-Chain:</b> √âvolution d√©mocratique du protocole<br/>
        ‚Ä¢ <b>Proof-of-Stake:</b> √âcologique et √©nerg√©tiquement efficace<br/><br/>
        
        <b>Fonctionnalit√©s Blockchain Exploit√©es:</b><br/><br/>
        
        <b>1. Immutabilit√©:</b><br/>
        Tous les ordres et trades sont enregistr√©s de mani√®re permanente et v√©rifiable.
        Impossible de modifier r√©troactivement l'historique des transactions.<br/><br/>
        
        <b>2. Ex√©cution Automatique:</b><br/>
        Les smart contracts ex√©cutent automatiquement les trades selon des r√®gles
        pr√©d√©finies, sans intervention humaine ni risque de manipulation.<br/><br/>
        
        <b>3. D√©centralisation:</b><br/>
        Le carnet d'ordres existe directement sur la blockchain, √©liminant le besoin
        d'un serveur central ou d'un interm√©diaire de confiance.<br/><br/>
        
        <b>4. Interop√©rabilit√©:</b><br/>
        Compatible avec l'√©cosyst√®me Tezos existant et les autres dApps.
        """
        self.story.append(Paragraph(blockchain_text, self.body_style))
        
        self.story.append(PageBreak())

    def create_features_section(self):
        """Detail the main features"""
        title = Paragraph("3. Fonctionnalit√©s Principales", self.section_style)
        self.story.append(title)
        
        # Create features table
        features_data = [
            ['Fonctionnalit√©', 'Description', 'Avantage'],
            ['Token Standard', 'Mint, burn, transfer de tokens ACT', 'Gestion flexible de l\'offre'],
            ['Ordres d\'Achat', 'Placement d\'ordres avec paiement en Tez', 'Liquidit√© buyer-side'],
            ['Ordres de Vente', 'Vente de tokens au prix souhait√©', 'Contr√¥le du prix de vente'],
            ['Matching Automatique', 'Ex√©cution automatique des ordres compatibles', 'Efficacit√© et rapidit√©'],
            ['Annulation d\'Ordres', 'Annulation avec remboursement automatique', 'Flexibilit√© pour les traders'],
            ['Statistiques Live', 'Prix actuel, volume 24h, historique', 'Information transparente'],
            ['Interface Web', 'dApp compl√®te avec graphiques et orderbook', 'Exp√©rience utilisateur intuitive']
        ]
        
        features_table = Table(features_data, colWidths=[1.8*inch, 2.5*inch, 2*inch])
        features_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.primary_color),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 10),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), self.bg_color),
            ('GRID', (0, 0), (-1, -1), 1, black),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
        ]))
        
        self.story.append(features_table)
        self.story.append(Spacer(1, 20))
        
        # Technical details
        tech_text = """
        <b>D√©tails Techniques:</b><br/><br/>
        
        <b>‚Ä¢ Smart Contract en SmartPy:</b><br/>
        Utilise SmartPy pour une syntaxe Python famili√®re avec compilation vers Michelson<br/><br/>
        
        <b>‚Ä¢ Storage Optimis√©:</b><br/>
        Big_maps pour les soldes, ordres et trades pour une scalabilit√© maximale<br/><br/>
        
        <b>‚Ä¢ Vues On-Chain:</b><br/>
        Acc√®s en lecture aux donn√©es sans frais de transaction<br/><br/>
        
        <b>‚Ä¢ Gestion des Erreurs:</b><br/>
        Assertions compl√®tes pour pr√©venir les √©tats invalides<br/><br/>
        
        <b>‚Ä¢ Tests Complets:</b><br/>
        Suite de tests couvrant tous les sc√©narios d'usage
        """
        self.story.append(Paragraph(tech_text, self.body_style))
        
        self.story.append(PageBreak())

    def create_ui_diagram(self):
        """Create UI mockup diagram"""
        title = Paragraph("4. Interface Utilisateur (dApp)", self.section_style)
        self.story.append(title)
        
        # Create a simple UI mockup using matplotlib
        fig, ax = plt.subplots(figsize=(10, 8))
        ax.set_xlim(0, 10)
        ax.set_ylim(0, 8)
        ax.axis('off')
        
        # Header
        header = patches.Rectangle((0.5, 7), 9, 0.8, linewidth=2, 
                                 edgecolor='#2E86AB', facecolor='#2E86AB')
        ax.add_patch(header)
        ax.text(5, 7.4, 'ActionChain Token - Trading Interface', 
                ha='center', va='center', color='white', fontsize=14, weight='bold')
        
        # Price display
        price_box = patches.Rectangle((0.5, 6), 9, 0.8, linewidth=1, 
                                    edgecolor='#A23B72', facecolor='#F5F5F5')
        ax.add_patch(price_box)
        ax.text(2, 6.4, 'Prix Actuel: 1.20 Íú©', ha='left', va='center', fontsize=12, weight='bold')
        ax.text(8, 6.4, '+0.05 (+4.35%)', ha='right', va='center', color='green', fontsize=12)
        
        # Chart area
        chart_box = patches.Rectangle((0.5, 3.5), 4, 2.3, linewidth=1, 
                                    edgecolor='gray', facecolor='white')
        ax.add_patch(chart_box)
        ax.text(2.5, 5.5, 'Graphique des Prix', ha='center', va='center', fontsize=11, weight='bold')
        ax.text(2.5, 4.5, 'üìà', ha='center', va='center', fontsize=30)
        
        # Orderbook
        orderbook_box = patches.Rectangle((5, 3.5), 4.5, 2.3, linewidth=1, 
                                        edgecolor='gray', facecolor='white')
        ax.add_patch(orderbook_box)
        ax.text(7.25, 5.5, 'Carnet d\'Ordres', ha='center', va='center', fontsize=11, weight='bold')
        
        # Sell orders
        sell_box = patches.Rectangle((5.2, 4.8), 2, 0.8, linewidth=1, 
                                   edgecolor='red', facecolor='#ffe6e6')
        ax.add_patch(sell_box)
        ax.text(6.2, 5.2, 'Ventes', ha='center', va='center', fontsize=10, color='red')
        
        # Buy orders
        buy_box = patches.Rectangle((7.3, 4.8), 2, 0.8, linewidth=1, 
                                  edgecolor='green', facecolor='#e6ffe6')
        ax.add_patch(buy_box)
        ax.text(8.3, 5.2, 'Achats', ha='center', va='center', fontsize=10, color='green')
        
        # Trading forms
        buy_form = patches.Rectangle((0.5, 0.5), 4, 2.8, linewidth=1, 
                                   edgecolor='green', facecolor='#e6ffe6')
        ax.add_patch(buy_form)
        ax.text(2.5, 2.8, 'Formulaire d\'Achat', ha='center', va='center', fontsize=11, weight='bold')
        ax.text(2.5, 2.2, 'Prix: [____] Íú©', ha='center', va='center', fontsize=10)
        ax.text(2.5, 1.8, 'Quantit√©: [____]', ha='center', va='center', fontsize=10)
        ax.text(2.5, 1.4, '[Bouton Acheter]', ha='center', va='center', fontsize=10, 
                bbox=dict(boxstyle="round,pad=0.3", facecolor='green', alpha=0.7))
        
        sell_form = patches.Rectangle((5, 0.5), 4.5, 2.8, linewidth=1, 
                                    edgecolor='red', facecolor='#ffe6e6')
        ax.add_patch(sell_form)
        ax.text(7.25, 2.8, 'Formulaire de Vente', ha='center', va='center', fontsize=11, weight='bold')
        ax.text(7.25, 2.2, 'Prix: [____] Íú©', ha='center', va='center', fontsize=10)
        ax.text(7.25, 1.8, 'Quantit√©: [____]', ha='center', va='center', fontsize=10)
        ax.text(7.25, 1.4, '[Bouton Vendre]', ha='center', va='center', fontsize=10,
                bbox=dict(boxstyle="round,pad=0.3", facecolor='red', alpha=0.7))
        
        plt.title('Interface dApp ActionChain Token', fontsize=16, weight='bold', pad=20)
        
        # Save the plot
        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
        buf.seek(0)
        plt.close()
        
        # Add to story
        img = Image(buf, width=7*inch, height=5.6*inch)
        self.story.append(img)
        
        ui_description = """
        <b>Composants de l'Interface:</b><br/>
        ‚Ä¢ <b>Header:</b> Affichage du prix actuel et variation<br/>
        ‚Ä¢ <b>Graphique:</b> √âvolution des prix en temps r√©el<br/>
        ‚Ä¢ <b>Carnet d'Ordres:</b> Visualisation des ordres d'achat et de vente<br/>
        ‚Ä¢ <b>Formulaires de Trading:</b> Interface intuitive pour passer des ordres<br/>
        ‚Ä¢ <b>Historique:</b> Liste des derni√®res transactions<br/>
        ‚Ä¢ <b>Statistiques:</b> Volume 24h, spread, liquidit√©
        """
        self.story.append(Paragraph(ui_description, self.body_style))
        
        self.story.append(PageBreak())

    def create_architecture_diagram(self):
        """Create system architecture diagram"""
        title = Paragraph("5. Architecture et Interactions On-Chain/Off-Chain", self.section_style)
        self.story.append(title)
        
        # Create architecture diagram
        fig, ax = plt.subplots(figsize=(12, 10))
        ax.set_xlim(0, 12)
        ax.set_ylim(0, 10)
        ax.axis('off')
        
        # Blockchain layer (bottom)
        blockchain_rect = patches.Rectangle((1, 0.5), 10, 2, linewidth=3, 
                                          edgecolor='#2E86AB', facecolor='#E3F2FD')
        ax.add_patch(blockchain_rect)
        ax.text(6, 1.5, 'TEZOS BLOCKCHAIN', ha='center', va='center', 
                fontsize=14, weight='bold', color='#2E86AB')
        
        # Smart Contract
        contract_rect = patches.Rectangle((2, 1), 3, 1, linewidth=2, 
                                        edgecolor='#A23B72', facecolor='white')
        ax.add_patch(contract_rect)
        ax.text(3.5, 1.5, 'ActionChain\nSmart Contract', ha='center', va='center', 
                fontsize=10, weight='bold')
        
        # Storage
        storage_rect = patches.Rectangle((7, 1), 3, 1, linewidth=2, 
                                       edgecolor='#F18F01', facecolor='white')
        ax.add_patch(storage_rect)
        ax.text(8.5, 1.5, 'Storage\n(Balances, Orders, Trades)', ha='center', va='center', 
                fontsize=10, weight='bold')
        
        # Web3 Interface layer
        web3_rect = patches.Rectangle((1, 3.5), 10, 1.5, linewidth=2, 
                                    edgecolor='#4CAF50', facecolor='#E8F5E8')
        ax.add_patch(web3_rect)
        ax.text(6, 4.25, 'WEB3 INTERFACE LAYER', ha='center', va='center', 
                fontsize=12, weight='bold', color='#4CAF50')
        
        # Wallet integration
        wallet_rect = patches.Rectangle((2, 3.7), 2.5, 1.1, linewidth=1, 
                                      edgecolor='gray', facecolor='white')
        ax.add_patch(wallet_rect)
        ax.text(3.25, 4.25, 'Temple Wallet\nIntegration', ha='center', va='center', fontsize=9)
        
        # Transaction handling
        tx_rect = patches.Rectangle((7.5, 3.7), 2.5, 1.1, linewidth=1, 
                                  edgecolor='gray', facecolor='white')
        ax.add_patch(tx_rect)
        ax.text(8.75, 4.25, 'Transaction\nSigning & Broadcasting', ha='center', va='center', fontsize=9)
        
        # Frontend layer
        frontend_rect = patches.Rectangle((1, 6), 10, 2, linewidth=2, 
                                        edgecolor='#9C27B0', facecolor='#F3E5F5')
        ax.add_patch(frontend_rect)
        ax.text(6, 7, 'FRONTEND dAPP', ha='center', va='center', 
                fontsize=12, weight='bold', color='#9C27B0')
        
        # UI components
        components = [
            (2.5, 6.3, 'Trading\nInterface'),
            (4.5, 6.3, 'Orderbook\nVisualization'),
            (6.5, 6.3, 'Price\nCharts'),
            (8.5, 6.3, 'Portfolio\nManagement'),
            (10.5, 6.3, 'Transaction\nHistory')
        ]
        
        for x, y, label in components:
            comp_rect = patches.Rectangle((x-0.4, y), 0.8, 1.4, linewidth=1, 
                                        edgecolor='gray', facecolor='white')
            ax.add_patch(comp_rect)
            ax.text(x, y+0.7, label, ha='center', va='center', fontsize=8)
        
        # User layer
        user_rect = patches.Rectangle((3, 8.5), 6, 1, linewidth=2, 
                                    edgecolor='#FF5722', facecolor='#FFF3E0')
        ax.add_patch(user_rect)
        ax.text(6, 9, 'UTILISATEURS (TRADERS)', ha='center', va='center', 
                fontsize=12, weight='bold', color='#FF5722')
        
        # Arrows showing data flow
        # User to Frontend
        ax.annotate('', xy=(6, 8), xytext=(6, 8.5), 
                   arrowprops=dict(arrowstyle='<->', color='black', lw=2))
        
        # Frontend to Web3
        ax.annotate('', xy=(6, 5), xytext=(6, 6), 
                   arrowprops=dict(arrowstyle='<->', color='black', lw=2))
        
        # Web3 to Blockchain
        ax.annotate('', xy=(6, 2.5), xytext=(6, 3.5), 
                   arrowprops=dict(arrowstyle='<->', color='black', lw=2))
        
        # Contract to Storage
        ax.annotate('', xy=(7, 1.5), xytext=(5, 1.5), 
                   arrowprops=dict(arrowstyle='<->', color='black', lw=2))
        
        # Add labels for interactions
        ax.text(6.3, 8.25, 'Interactions\nUtilisateur', ha='left', va='center', fontsize=8, 
                bbox=dict(boxstyle="round,pad=0.2", facecolor='yellow', alpha=0.7))
        
        ax.text(6.3, 5.5, 'Appels Web3\nTezTalks JS', ha='left', va='center', fontsize=8,
                bbox=dict(boxstyle="round,pad=0.2", facecolor='lightblue', alpha=0.7))
        
        ax.text(6.3, 3, 'Transactions\nBlockchain', ha='left', va='center', fontsize=8,
                bbox=dict(boxstyle="round,pad=0.2", facecolor='lightgreen', alpha=0.7))
        
        plt.title('Architecture Syst√®me ActionChain Token', fontsize=16, weight='bold', pad=20)
        
        # Save the plot
        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=300, bbox_inches='tight')
        buf.seek(0)
        plt.close()
        
        # Add to story
        img = Image(buf, width=8*inch, height=6.7*inch)
        self.story.append(img)
        
        # Architecture explanation
        arch_text = """
        <b>Flux de Donn√©es et Interactions:</b><br/><br/>
        
        <b>1. Couche Utilisateur:</b><br/>
        Les traders interagissent avec l'interface web pour passer des ordres, consulter
        le carnet d'ordres et suivre leurs positions.<br/><br/>
        
        <b>2. Frontend dApp:</b><br/>
        Interface React/JavaScript qui g√®re l'affichage des donn√©es, la validation des
        formulaires et la pr√©paration des transactions.<br/><br/>
        
        <b>3. Couche Web3:</b><br/>
        Int√©gration avec Temple Wallet pour la signature des transactions et l'interaction
        avec la blockchain Tezos via TezTalks.js.<br/><br/>
        
        <b>4. Smart Contract:</b><br/>
        Logique m√©tier centralis√©e qui g√®re les ordres, ex√©cute les trades et maintient
        l'√©tat du syst√®me de mani√®re d√©centralis√©e.<br/><br/>
        
        <b>5. Storage On-Chain:</b><br/>
        Toutes les donn√©es critiques (soldes, ordres, historique) sont stock√©es
        directement sur la blockchain pour garantir la transparence et la persistance.
        """
        self.story.append(Paragraph(arch_text, self.body_style))
        
        self.story.append(PageBreak())

    def create_benefits_conclusion(self):
        """Create benefits and conclusion section"""
        title = Paragraph("6. Avantages Concurrentiels et Vision", self.section_style)
        self.story.append(title)
        
        benefits_text = """
        <b>Avantages Uniques d'ActionChain Token:</b><br/><br/>
        
        <b>‚Ä¢ V√©ritable D√©centralisation:</b><br/>
        Contrairement aux DEX traditionnels qui utilisent des relayers centralis√©s,
        ActionChain int√®gre le carnet d'ordres directement dans le smart contract.<br/><br/>
        
        <b>‚Ä¢ Co√ªts R√©duits:</b><br/>
        √âlimination des frais d'interm√©diaires, seuls les frais de gas s'appliquent.<br/><br/>
        
        <b>‚Ä¢ Transparence Totale:</b><br/>
        Tous les ordres et trades sont visibles et v√©rifiables publiquement.<br/><br/>
        
        <b>‚Ä¢ R√©sistance √† la Censure:</b><br/>
        Impossible de bloquer ou restreindre l'acc√®s aux march√©s.<br/><br/>
        
        <b>‚Ä¢ Composabilit√©:</b><br/>
        Int√©gration facile avec d'autres protocoles DeFi de l'√©cosyst√®me Tezos.<br/><br/>
        
        <b>Vision Future:</b><br/>
        ‚Ä¢ Extension √† d'autres types d'actifs (NFTs, stablecoins)<br/>
        ‚Ä¢ Int√©gration de fonctionnalit√©s DeFi avanc√©es (lending, yield farming)<br/>
        ‚Ä¢ Gouvernance d√©centralis√©e par les d√©tenteurs de tokens ACT<br/>
        ‚Ä¢ Expansion multi-cha√Ænes via des bridges interop√©rables<br/><br/>
        
        <b>Impact Attendu:</b><br/>
        ActionChain Token repr√©sente une √©tape importante vers la d√©mocratisation
        de la finance d√©centralis√©e, offrant aux utilisateurs un contr√¥le total
        sur leurs actifs et leurs transactions.
        """
        self.story.append(Paragraph(benefits_text, self.body_style))
        
        # Final summary box
        summary_data = [
            ['M√©trique', 'Valeur'],
            ['Type de Projet', 'DEX avec Orderbook On-Chain'],
            ['Blockchain', 'Tezos'],
            ['Langage Smart Contract', 'SmartPy (Michelson)'],
            ['Frontend', 'HTML/CSS/JavaScript + Web3'],
            ['Cas d\'Usage Principal', 'Trading D√©centralis√©'],
            ['Public Cible', 'Traders DeFi et Investisseurs Crypto'],
            ['Avantage Concurrentiel', 'V√©ritable D√©centralisation']
        ]
        
        summary_table = Table(summary_data, colWidths=[3*inch, 3*inch])
        summary_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.primary_color),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), self.bg_color),
            ('GRID', (0, 0), (-1, -1), 1, black),
            ('FONTSIZE', (0, 1), (-1, -1), 10),
        ]))
        
        self.story.append(Spacer(1, 20))
        self.story.append(summary_table)

    def generate_pdf(self):
        """Generate the complete PDF presentation"""
        print("Generating ActionChain Token presentation...")
        
        self.create_title_page()
        self.create_use_case_section()
        self.create_blockchain_solution_section()
        self.create_features_section()
        self.create_ui_diagram()
        self.create_architecture_diagram()
        self.create_benefits_conclusion()
        
        # Build the PDF
        self.doc.build(self.story)
        print("‚úÖ Presentation generated: ActionChain_Token_Presentation.pdf")

if __name__ == "__main__":
    presentation = ActionChainPresentation()
    presentation.generate_pdf()
